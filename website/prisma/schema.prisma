// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum Role {
    User
    Admin
}

model Submission {
    id        String   @id @default(cuid())
    code      String
    status    String
    message   String
    language  String
    is_public Boolean  @default(false)
    createdAt DateTime @default(now())
    problem   Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
    problemId Int
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
}

model Problem {
    id          Int          @id @default(autoincrement())
    title       String
    description String
    inputSpec   String
    outputSpec  String
    testcases   Testcase[]
    submission  Submission[]
}

model Testcase {
    id          String  @id @default(cuid())
    is_example  Boolean
    input       String
    output      String
    hide_output Boolean @default(false)
    timeout     Int     @default(1000)
    problem     Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
    problemId   Int
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    role          Role         @default(User)
    name          String
    email         String?      @unique
    emailVerified DateTime?
    image         String
    accounts      Account[]
    sessions      Session[]
    submission    Submission[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
